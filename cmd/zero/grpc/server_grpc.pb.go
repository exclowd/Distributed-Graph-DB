// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: server.proto

package zeroGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZeroClient is the client API for Zero service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZeroClient interface {
	JoinAGroup(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Group, error)
	CreateAGroup(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Group, error)
	UpdateLeader(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Group, error)
	GetLeader(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Node, error)
}

type zeroClient struct {
	cc grpc.ClientConnInterface
}

func NewZeroClient(cc grpc.ClientConnInterface) ZeroClient {
	return &zeroClient{cc}
}

func (c *zeroClient) JoinAGroup(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/zeroGrpc.Zero/JoinAGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) CreateAGroup(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/zeroGrpc.Zero/CreateAGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) UpdateLeader(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/zeroGrpc.Zero/UpdateLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroClient) GetLeader(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/zeroGrpc.Zero/GetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeroServer is the server API for Zero service.
// All implementations must embed UnimplementedZeroServer
// for forward compatibility
type ZeroServer interface {
	JoinAGroup(context.Context, *Node) (*Group, error)
	CreateAGroup(context.Context, *Node) (*Group, error)
	UpdateLeader(context.Context, *Node) (*Group, error)
	GetLeader(context.Context, *Group) (*Node, error)
	mustEmbedUnimplementedZeroServer()
}

// UnimplementedZeroServer must be embedded to have forward compatible implementations.
type UnimplementedZeroServer struct {
}

func (UnimplementedZeroServer) JoinAGroup(context.Context, *Node) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinAGroup not implemented")
}
func (UnimplementedZeroServer) CreateAGroup(context.Context, *Node) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAGroup not implemented")
}
func (UnimplementedZeroServer) UpdateLeader(context.Context, *Node) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeader not implemented")
}
func (UnimplementedZeroServer) GetLeader(context.Context, *Group) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedZeroServer) mustEmbedUnimplementedZeroServer() {}

// UnsafeZeroServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZeroServer will
// result in compilation errors.
type UnsafeZeroServer interface {
	mustEmbedUnimplementedZeroServer()
}

func RegisterZeroServer(s grpc.ServiceRegistrar, srv ZeroServer) {
	s.RegisterService(&Zero_ServiceDesc, srv)
}

func _Zero_JoinAGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).JoinAGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeroGrpc.Zero/JoinAGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).JoinAGroup(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_CreateAGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).CreateAGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeroGrpc.Zero/CreateAGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).CreateAGroup(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_UpdateLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).UpdateLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeroGrpc.Zero/UpdateLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).UpdateLeader(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zero_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeroGrpc.Zero/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroServer).GetLeader(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

// Zero_ServiceDesc is the grpc.ServiceDesc for Zero service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zero_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zeroGrpc.Zero",
	HandlerType: (*ZeroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinAGroup",
			Handler:    _Zero_JoinAGroup_Handler,
		},
		{
			MethodName: "CreateAGroup",
			Handler:    _Zero_CreateAGroup_Handler,
		},
		{
			MethodName: "UpdateLeader",
			Handler:    _Zero_UpdateLeader_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _Zero_GetLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
